---
// Video Hero with Menu Overlay Component for BOWAVE
import Footer from './Footer.astro';

const videos = [
  {
    src: `${import.meta.env.BASE_URL}/videos/bowa-v1.mp4`,
    poster: '', // Optional poster image
    cta: '',
    // overlay: 'bg-red-900 bg-opacity-20'
  },
  {
    src: `${import.meta.env.BASE_URL}/videos/bowa-v2.mp4`,
    poster: '', // Optional poster image
    cta: '',
    // overlay: 'bg-gray-900 bg-opacity-30'
  }
];
---

<!-- Footer moved to top -->
<Footer />

<section class="relative h-screen overflow-hidden bg-black">
  <!-- Video Slider Container - Background -->
  <div id="videoSlider" class="relative w-full h-full z-10">
    {videos.map((video, index) => (
      <div 
        class={`video-slide absolute inset-0 transition-opacity duration-1000 ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
        data-slide={index}
      >
        <!-- Video Element -->
        <video
          class="absolute inset-0 w-full h-full object-cover"
          autoplay={index === 0}
          muted
          loop
          playsinline
          poster={video.poster}
          data-video-index={index}
        >
          <source src={video.src} type="video/mp4" />
          Ihr Browser unterst√ºtzt keine Videos.
        </video>
        
        <!-- Video Overlay -->
        <div class={`absolute inset-0 ${video.overlay}`}></div>
        
        <!-- Content Overlay -->
        <div class="absolute inset-0 flex items-center justify-center">
          <div class="text-center text-white px-4 max-w-4xl mx-auto">
            <!-- Video Title -->
            <h2 class="text-3xl md:text-5xl font-bold mb-4 leading-tight">
              {video.title}
            </h2>
            
            <!-- Video Subtitle -->
            <p class="text-xl md:text-2xl mb-8 text-gray-200">
              {video.subtitle}
            </p>
            
            <!-- CTA Button -->
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <!-- Navigation Controls -->
  <div class="absolute inset-0 z-20 pointer-events-none">
    <!-- Navigation Dots -->
    <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-3 pointer-events-auto">
      {videos.map((_, index) => (
        <button
          class={`w-3 h-3 rounded-full transition-all duration-300 ${index === 0 ? 'bg-red-600' : 'bg-white bg-opacity-50'} hover:bg-red-500`}
          data-slide-to={index}
          aria-label={`Go to slide ${index + 1}`}
        ></button>
      ))}
    </div>
    
    <!-- Navigation Arrows -->
    <button 
      id="prevSlide"
      class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-3 rounded-full hover:bg-opacity-70 transition-all duration-300 pointer-events-auto"
      aria-label="Previous slide"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
      </svg>
    </button>
    
    <button 
      id="nextSlide"
      class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-3 rounded-full hover:bg-opacity-70 transition-all duration-300 pointer-events-auto"
      aria-label="Next slide"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
      </svg>
    </button>
    
    <!-- Play/Pause Button -->
    <button 
      id="playPauseBtn"
      class="absolute bottom-8 right-8 bg-black bg-opacity-50 text-white p-3 rounded-full hover:bg-opacity-70 transition-all duration-300 pointer-events-auto"
      aria-label="Play/Pause video"
    >
      <svg id="playIcon" class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
        <path d="M8 5v14l11-7z"/>
      </svg>
      <svg id="pauseIcon" class="w-6 h-6 hidden" fill="currentColor" viewBox="0 0 24 24">
        <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
      </svg>
    </button>
  </div>
</section>

<script>
  // Video Slider Functionality
  let currentSlide = 0;
  const slides = document.querySelectorAll('.video-slide');
  const videos = document.querySelectorAll('.video-slide video');
  const dots = document.querySelectorAll('[data-slide-to]');
  const totalSlides = slides.length;
  let slideInterval: NodeJS.Timeout;
  let isPlaying = true;
  
  // Initialize slider
  function initSlider() {
    // Auto-advance slides every 15 seconds (longer for videos)
    slideInterval = setInterval(() => {
      nextSlide();
    }, 15000);
  }
  
  // Show specific slide
  function showSlide(index: number) {
    // Pause all videos first
    videos.forEach((video) => {
      video.pause();
    });
    
    // Hide all slides
    slides.forEach((slide, i) => {
      slide.classList.toggle('opacity-100', i === index);
      slide.classList.toggle('opacity-0', i !== index);
    });
    
    // Play current video if playing state is true
    const currentVideo = videos[index] as HTMLVideoElement;
    if (currentVideo && isPlaying) {
      currentVideo.play().catch(() => {
        // Autoplay might be blocked, that's okay
        console.log('Video autoplay was prevented');
      });
    }
    
    // Update dots
    dots.forEach((dot, i) => {
      dot.classList.toggle('bg-red-600', i === index);
      dot.classList.toggle('bg-white', i !== index);
      dot.classList.toggle('bg-opacity-50', i !== index);
    });
    
    currentSlide = index;
  }
  
  // Next slide
  function nextSlide() {
    const next = (currentSlide + 1) % totalSlides;
    showSlide(next);
  }
  
  // Previous slide
  function prevSlide() {
    const prev = (currentSlide - 1 + totalSlides) % totalSlides;
    showSlide(prev);
  }
  
  // Play/Pause functionality
  function togglePlayPause() {
    const currentVideo = videos[currentSlide] as HTMLVideoElement;
    const playIcon = document.getElementById('playIcon');
    const pauseIcon = document.getElementById('pauseIcon');
    
    if (isPlaying) {
      // Pause video
      currentVideo?.pause();
      isPlaying = false;
      playIcon?.classList.remove('hidden');
      pauseIcon?.classList.add('hidden');
    } else {
      // Play video
      currentVideo?.play().catch(() => {
        console.log('Video play was prevented');
      });
      isPlaying = true;
      playIcon?.classList.add('hidden');
      pauseIcon?.classList.remove('hidden');
    }
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    // Navigation arrows
    document.getElementById('nextSlide')?.addEventListener('click', () => {
      nextSlide();
      // Reset auto-advance timer
      clearInterval(slideInterval);
      initSlider();
    });
    
    document.getElementById('prevSlide')?.addEventListener('click', () => {
      prevSlide();
      // Reset auto-advance timer
      clearInterval(slideInterval);
      initSlider();
    });
    
    // Play/Pause button
    document.getElementById('playPauseBtn')?.addEventListener('click', () => {
      togglePlayPause();
    });
    
    // Dots navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        showSlide(index);
        // Reset auto-advance timer
        clearInterval(slideInterval);
        initSlider();
      });
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        prevSlide();
      } else if (e.key === 'ArrowRight') {
        nextSlide();
      } else if (e.key === ' ') {
        e.preventDefault();
        togglePlayPause();
      }
    });
    
    // Pause on hover of slider area (not menu)
    const slider = document.getElementById('videoSlider');
    slider?.addEventListener('mouseenter', () => {
      clearInterval(slideInterval);
    });
    
    slider?.addEventListener('mouseleave', () => {
      initSlider();
    });
    
    // Initialize
    initSlider();
    
    // Start first video
    const firstVideo = videos[0] as HTMLVideoElement;
    if (firstVideo) {
      firstVideo.play().catch(() => {
        console.log('Initial video autoplay was prevented');
        isPlaying = false;
        document.getElementById('playIcon')?.classList.remove('hidden');
        document.getElementById('pauseIcon')?.classList.add('hidden');
      });
    }
  });
</script>

<style>
  /* Custom styles for video slider */
  .video-slide {
    z-index: 1;
  }
  
  .video-slide video {
    filter: brightness(0.7);
  }
  
  /* Smooth transitions */
  .video-slide {
    transition: opacity 1s ease-in-out;
  }
  
  /* Ensure menu overlay stays on top */
  footer {
    position: relative;
    z-index: 30;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .video-slide h2 {
      font-size: 2rem;
    }
    
    .video-slide p {
      font-size: 1.25rem;
    }
    
    .video-slide button {
      font-size: 1rem;
      padding: 0.75rem 1.5rem;
    }
    
    /* Hide some controls on small screens to make room for menu */
    #playPauseBtn {
      display: none;
    }
  }
</style> 