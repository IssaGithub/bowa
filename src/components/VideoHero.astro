---
// Video Hero Slider Component for BOWAVE
const videos = [
  {
    src: '/videos/hero-video-1.mp4',
    poster: '/images/hero-poster-1.jpg',
    title: 'BOWAVE Summer Collection',
    subtitle: 'Neue Streetwear f端r den Sommer 2025',
    cta: 'Jetzt entdecken'
  },
  {
    src: '/videos/hero-video-2.mp4',
    poster: '/images/hero-poster-2.jpg',
    title: 'Limited Edition Drop',
    subtitle: 'Exklusive Pieces f端r echte Streetwear-Fans',
    cta: 'Shop Collection'
  },
  {
    src: '/videos/hero-video-3.mp4',
    poster: '/images/hero-poster-3.jpg',
    title: 'BOWAVE Skateboard Series',
    subtitle: 'Von der Street f端r die Street',
    cta: 'Alle Decks ansehen'
  }
];
---

<section class="relative h-screen overflow-hidden bg-black">
  <!-- Video Slider Container -->
  <div id="videoSlider" class="relative w-full h-full">
    {videos.map((video, index) => (
      <div 
        class={`video-slide absolute inset-0 transition-opacity duration-1000 ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
        data-slide={index}
      >
        <!-- Video Element -->
        <video
          class="absolute inset-0 w-full h-full object-cover"
          autoplay={index === 0}
          muted
          loop
          playsinline
          poster={video.poster}
          data-video-index={index}
        >
          <source src={video.src} type="video/mp4" />
          Ihr Browser unterst端tzt keine Videos.
        </video>
        
        <!-- Video Overlay -->
        <div class="absolute inset-0 bg-black bg-opacity-40"></div>
        
        <!-- Content Overlay -->
        <div class="absolute inset-0 flex items-center justify-center">
          <div class="text-center text-white px-4 max-w-4xl mx-auto">
            <!-- BOWAVE Logo -->
            <div class="bg-red-600 px-8 py-4 mb-8 mx-auto w-fit">
              <h1 class="text-white font-bold text-4xl md:text-6xl tracking-wider">BOWAVE</h1>
            </div>
            
            <!-- Video Title -->
            <h2 class="text-3xl md:text-5xl font-bold mb-4 leading-tight">
              {video.title}
            </h2>
            
            <!-- Video Subtitle -->
            <p class="text-xl md:text-2xl mb-8 text-gray-200">
              {video.subtitle}
            </p>
            
            <!-- CTA Button -->
            <button 
              class="bg-red-600 hover:bg-red-700 text-white font-bold py-4 px-8 text-lg transition-colors duration-300 border border-red-600 hover:border-red-700"
              onclick="window.location.href='/shop'"
            >
              {video.cta}
            </button>
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <!-- Navigation Dots -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-3 z-20">
    {videos.map((_, index) => (
      <button
        class={`w-3 h-3 rounded-full transition-all duration-300 ${index === 0 ? 'bg-red-600' : 'bg-white bg-opacity-50'} hover:bg-red-500`}
        data-slide-to={index}
        aria-label={`Go to slide ${index + 1}`}
      ></button>
    ))}
  </div>
  
  <!-- Navigation Arrows -->
  <button 
    id="prevSlide"
    class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-3 rounded-full hover:bg-opacity-70 transition-all duration-300 z-20"
    aria-label="Previous video"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
    </svg>
  </button>
  
  <button 
    id="nextSlide"
    class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-3 rounded-full hover:bg-opacity-70 transition-all duration-300 z-20"
    aria-label="Next video"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
    </svg>
  </button>
  
  <!-- Play/Pause Button -->
  <button 
    id="playPauseBtn"
    class="absolute bottom-8 right-8 bg-black bg-opacity-50 text-white p-3 rounded-full hover:bg-opacity-70 transition-all duration-300 z-20"
    aria-label="Play/Pause video"
  >
    <svg id="playIcon" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1m-6-8h8a2 2 0 012 2v8a2 2 0 01-2 2H8a2 2 0 01-2-2V6a2 2 0 012-2z"/>
    </svg>
    <svg id="pauseIcon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6"/>
    </svg>
  </button>
  
  <!-- Video Progress Bar -->
  <div class="absolute bottom-0 left-0 right-0 h-1 bg-black bg-opacity-30 z-20">
    <div id="progressBar" class="h-full bg-red-600 transition-all duration-100" style="width: 0%"></div>
  </div>
</section>

<script>
  // Video Slider Functionality
  let currentSlide = 0;
  const slides = document.querySelectorAll('.video-slide');
  const dots = document.querySelectorAll('[data-slide-to]');
  const videos = document.querySelectorAll('video');
  const totalSlides = slides.length;
  let isPlaying = true;
  let slideInterval: NodeJS.Timeout;
  
  // Initialize slider
  function initSlider() {
    // Auto-advance slides every 10 seconds
    slideInterval = setInterval(() => {
      if (isPlaying) {
        nextSlide();
      }
    }, 10000);
    
    // Update progress bar
    updateProgressBar();
  }
  
  // Show specific slide
  function showSlide(index: number) {
    // Hide all slides
    slides.forEach((slide, i) => {
      slide.classList.toggle('opacity-100', i === index);
      slide.classList.toggle('opacity-0', i !== index);
    });
    
    // Update dots
    dots.forEach((dot, i) => {
      dot.classList.toggle('bg-red-600', i === index);
      dot.classList.toggle('bg-white', i !== index);
      dot.classList.toggle('bg-opacity-50', i !== index);
    });
    
    // Pause all videos
    videos.forEach(video => video.pause());
    
    // Play current video
    const currentVideo = videos[index] as HTMLVideoElement;
    if (currentVideo && isPlaying) {
      currentVideo.play().catch(e => console.log('Video play failed:', e));
    }
    
    currentSlide = index;
  }
  
  // Next slide
  function nextSlide() {
    const next = (currentSlide + 1) % totalSlides;
    showSlide(next);
  }
  
  // Previous slide
  function prevSlide() {
    const prev = (currentSlide - 1 + totalSlides) % totalSlides;
    showSlide(prev);
  }
  
  // Toggle play/pause
  function togglePlayPause() {
    const currentVideo = videos[currentSlide] as HTMLVideoElement;
    const playIcon = document.getElementById('playIcon');
    const pauseIcon = document.getElementById('pauseIcon');
    
    if (isPlaying) {
      currentVideo.pause();
      isPlaying = false;
      playIcon?.classList.remove('hidden');
      pauseIcon?.classList.add('hidden');
    } else {
      currentVideo.play().catch(e => console.log('Video play failed:', e));
      isPlaying = true;
      playIcon?.classList.add('hidden');
      pauseIcon?.classList.remove('hidden');
    }
  }
  
  // Update progress bar
  function updateProgressBar() {
    const progressBar = document.getElementById('progressBar');
    
    setInterval(() => {
      if (isPlaying) {
        const currentVideo = videos[currentSlide] as HTMLVideoElement;
        if (currentVideo && currentVideo.duration) {
          const progress = (currentVideo.currentTime / currentVideo.duration) * 100;
          if (progressBar) {
            progressBar.style.width = `${progress}%`;
          }
        }
      }
    }, 100);
  }
  
  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    // Navigation arrows
    document.getElementById('nextSlide')?.addEventListener('click', () => {
      nextSlide();
      // Reset auto-advance timer
      clearInterval(slideInterval);
      initSlider();
    });
    
    document.getElementById('prevSlide')?.addEventListener('click', () => {
      prevSlide();
      // Reset auto-advance timer
      clearInterval(slideInterval);
      initSlider();
    });
    
    // Dots navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        showSlide(index);
        // Reset auto-advance timer
        clearInterval(slideInterval);
        initSlider();
      });
    });
    
    // Play/pause button
    document.getElementById('playPauseBtn')?.addEventListener('click', togglePlayPause);
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        prevSlide();
      } else if (e.key === 'ArrowRight') {
        nextSlide();
      } else if (e.key === ' ') {
        e.preventDefault();
        togglePlayPause();
      }
    });
    
    // Pause on hover
    const slider = document.getElementById('videoSlider');
    slider?.addEventListener('mouseenter', () => {
      clearInterval(slideInterval);
    });
    
    slider?.addEventListener('mouseleave', () => {
      if (isPlaying) {
        initSlider();
      }
    });
    
    // Initialize
    initSlider();
  });
</script>

<style>
  /* Custom styles for video slider */
  .video-slide {
    z-index: 1;
  }
  
  .video-slide video {
    filter: brightness(0.8);
  }
  
  /* Smooth transitions */
  .video-slide {
    transition: opacity 1s ease-in-out;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .video-slide h2 {
      font-size: 2rem;
    }
    
    .video-slide p {
      font-size: 1.25rem;
    }
    
    .video-slide button {
      font-size: 1rem;
      padding: 0.75rem 1.5rem;
    }
  }
</style> 